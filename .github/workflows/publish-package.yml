name: Publish Package to PyPI

on:
  push:
    tags:
      - "v*"

jobs:
  publish:
    name: Publish to PyPI
    environment: pypi
    runs-on: ubuntu-latest

    permissions:
      contents: read
      packages: write
      id-token: write

    steps:
    - name: Check out code
      uses: actions/checkout@v3

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: 3.11

    - name: Clear GitHub Actions cache
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/setup.py') }}
        restore-keys: |
          ${{ runner.os }}-pip-    

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip setuptools wheel twine
        echo "Attempting to install JPype1 from PyPI..."
        if ! python -m pip install JPype1; then
          echo "PyPI installation failed. Falling back to local wheels..."
          if [[ $RUNNER_OS == "Linux" ]]; then
            echo "Installing JPype1 for Linux..."
            python -m pip install wbjdbc/resources/dependencies/jpype1-1.5.1-cp312-cp312-manylinux_2_17_x86_64.manylinux2014_x86_64.whl
          elif [[ $RUNNER_OS == "Windows" ]]; then
            echo "Installing JPype1 for Windows..."
            python -m pip install wbjdbc/resources/dependencies/jpype1-1.5.1-cp312-cp312-win_amd64.whl
          elif [[ $RUNNER_OS == "macOS" ]]; then
            echo "Installing JPype1 for macOS..."
            python -m pip install wbjdbc/resources/dependencies/jpype1-1.5.1-cp312-cp312-macosx_10_9_universal2.whl
          else
            echo "Unsupported OS: $RUNNER_OS"
            exit 1
          fi
        else
          echo "JPype1 successfully installed from PyPI!"
        fi

    - name: Build package
      run: python setup.py sdist bdist_wheel

    - name: Publish package to PyPI
      run: python -m twine upload dist/*
      env:
        TWINE_USERNAME: __token__
        TWINE_PASSWORD: ${{ secrets.PYPI_API_TOKEN }}
